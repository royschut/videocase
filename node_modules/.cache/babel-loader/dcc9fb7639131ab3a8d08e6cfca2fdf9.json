{"ast":null,"code":"import _slicedToArray from\"/Users/royschut 1/videodock_frontend_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/*\n *   App\n *\n *   Creates the UI through AppView\n *   When mounted: loads playlist through PlaylistLoader\n *   Uses state for videos (playlist) and curVid: when a vid is selected\n *\n */import React,{useState,useEffect}from\"react\";import\"./App.css\";import PlaylistLoader from\"./util/PlaylistLoader\";import AppView from\"./view/AppView\";export default function App(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),videos=_useState2[0],setVideos=_useState2[1];//When mounted, load playlists -> then add to state: setVideos\nuseEffect(function(){PlaylistLoader(function(playlist){return setVideos(playlist);});},[]);return/*#__PURE__*/React.createElement(AppView,{videos:videos});}","map":{"version":3,"sources":["/Users/royschut 1/videodock_frontend_test/src/App.js"],"names":["React","useState","useEffect","PlaylistLoader","AppView","App","videos","setVideos","playlist"],"mappings":"gKAAA;;;;;;;GASA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,MAAO,WAAP,CACA,MAAOC,CAAAA,cAAP,KAA2B,uBAA3B,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CAEA,cAAe,SAASC,CAAAA,GAAT,EAAe,eACAJ,QAAQ,EADR,wCACrBK,MADqB,eACbC,SADa,eAG5B;AACAL,SAAS,CAAC,UAAM,CACdC,cAAc,CAAC,SAACK,QAAD,QAAcD,CAAAA,SAAS,CAACC,QAAD,CAAvB,EAAD,CAAd,CACD,CAFQ,CAEN,EAFM,CAAT,CAIA,mBAAO,oBAAC,OAAD,EAAS,MAAM,CAAEF,MAAjB,EAAP,CACD","sourcesContent":["/*\n *   App\n *\n *   Creates the UI through AppView\n *   When mounted: loads playlist through PlaylistLoader\n *   Uses state for videos (playlist) and curVid: when a vid is selected\n *\n */\n\nimport React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport PlaylistLoader from \"./util/PlaylistLoader\";\nimport AppView from \"./view/AppView\";\n\nexport default function App() {\n  const [videos, setVideos] = useState();\n\n  //When mounted, load playlists -> then add to state: setVideos\n  useEffect(() => {\n    PlaylistLoader((playlist) => setVideos(playlist));\n  }, []);\n\n  return <AppView videos={videos} />;\n}\n"]},"metadata":{},"sourceType":"module"}