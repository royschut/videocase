{"version":3,"sources":["view/AppView.jsx","App.js","util/PlaylistLoader.js","serviceWorker.js","index.js"],"names":["AppView","props","useState","curVid","setCurVid","curHover","setCurHover","Container","className","maxWidth","Typography","variant","Grid","container","spacing","direction","videos","map","v","i","item","key","Tooltip","title","placement","arrow","TransitionComponent","Zoom","enterDelay","Paper","onMouseEnter","onMouseLeave","elevation","style","padding","paddingBottom","opacity","src","image","alt","onClick","Modal","open","Button","sources","file","controls","autoPlay","App","setVideos","useEffect","callBack","playlist","axios","method","url","then","result","data","console","log","error","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"iXAsBe,SAASA,EAAQC,GAAQ,IAAD,EACTC,qBADS,mBAC9BC,EAD8B,KACtBC,EADsB,OAGLF,qBAHK,mBAG9BG,EAH8B,KAGpBC,EAHoB,KAKrC,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,MAAMC,SAAS,MAClC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,kBACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAU,OACnCd,EAAMe,QACLf,EAAMe,OAAOC,KAAI,SAACC,EAAGC,GAAJ,OACf,kBAACP,EAAA,EAAD,CAAMQ,MAAI,EAACC,IAAKF,GACd,kBAACG,EAAA,EAAD,CACEC,MAAOL,EAAEK,MACTC,UAAU,MACVC,OAAK,EACLC,oBAAqBC,IACrBC,WAAY,KAEZ,kBAACC,EAAA,EAAD,CACEC,aAAc,kBAAMxB,EAAYa,IAChCY,aAAc,kBAAMzB,KACpB0B,UAAW3B,IAAac,EAAI,EAAI,EAChCc,MAAO,CACLC,QAAS,EACTC,cAAe,EACfC,QAAS/B,IAAac,EAAI,EAAI,MAGhC,yBACEkB,IAAKnB,EAAEoB,MACPC,IAAKrB,EAAEK,MACPf,UAAU,SACVgC,QAAS,kBAAMpC,EAAUe,aAOvC,kBAACsB,EAAA,EAAD,CAAOC,KAAMvC,GAAU,GACrB,yBAAKK,UAAU,WACb,yBAAKA,UAAU,gBACb,kBAACmC,EAAA,EAAD,CAAQnC,UAAU,WAAWgC,QAAS,kBAAMpC,MAA5C,KAGCD,GAAU,GACT,2BACEkC,IAAKpC,EAAMe,OAAOb,GAAQyC,QAAQ,GAAGC,KACrCrC,UAAU,MACVsC,UAAQ,EACRC,UAAQ,QC1DT,SAASC,IAAO,IAAD,EACA9C,qBADA,mBACrBc,EADqB,KACbiC,EADa,KAQ5B,OAJAC,qBAAU,WCRG,IAAwBC,IDSpB,SAACC,GAAD,OAAcH,EAAUG,ICRzCC,IAAM,CACJC,OAAQ,MACRC,IALW,mDAMVC,MACD,SAACC,GACKA,EAAOC,KACLD,EAAOC,KAAKN,SACdD,EAASM,EAAOC,KAAKN,UAErBO,QAAQC,IAAI,gBAAkBH,EAAOC,MAGvCC,QAAQC,IAAI,YAAcH,MAG9B,SAACI,GACCF,QAAQC,IAAI,UAAYC,EAAMC,cDP/B,IAEI,kBAAC9D,EAAD,CAASgB,OAAQA,IEXN+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjB,GACLF,QAAQE,MAAMA,EAAMC,c","file":"static/js/main.a8a6821a.chunk.js","sourcesContent":["/*  AppView\n *\n *  The view of the app, using JSX with React and MUI components\n *\n *  This app uses the Material UI framework for UI purposes, such as:\n *  Responsive mobile-first layout, elevation state (lifting vid papers on hover),\n *  the Modal popup, Tooltips, etc\n */\n\nimport React, { useState } from \"react\";\n\nimport {\n  Container,\n  Grid,\n  Modal,\n  Typography,\n  Tooltip,\n  Zoom,\n  Paper,\n  Button,\n} from \"@material-ui/core\";\n\nexport default function AppView(props) {\n  const [curVid, setCurVid] = useState();\n\n  const [curHover, setCurHover] = useState(); //For rollover UX\n\n  return (\n    <Container className=\"App\" maxWidth=\"xl\">\n      <Typography variant=\"h4\">Video playlist</Typography>\n      <Grid container spacing={3} direction=\"row\">\n        {props.videos &&\n          props.videos.map((v, i) => (\n            <Grid item key={i}>\n              <Tooltip\n                title={v.title}\n                placement=\"top\"\n                arrow\n                TransitionComponent={Zoom}\n                enterDelay={300}\n              >\n                <Paper\n                  onMouseEnter={() => setCurHover(i)}\n                  onMouseLeave={() => setCurHover()}\n                  elevation={curHover === i ? 5 : 1}\n                  style={{\n                    padding: 2,\n                    paddingBottom: 0,\n                    opacity: curHover === i ? 1 : 0.95,\n                  }}\n                >\n                  <img\n                    src={v.image}\n                    alt={v.title}\n                    className=\"poster\"\n                    onClick={() => setCurVid(i)}\n                  />\n                </Paper>\n              </Tooltip>\n            </Grid>\n          ))}\n      </Grid>\n      <Modal open={curVid > -1}>\n        <div className=\"popover\">\n          <div className=\"vidcontainer\">\n            <Button className=\"closeBtn\" onClick={() => setCurVid()}>\n              x\n            </Button>\n            {curVid > -1 && (\n              <video\n                src={props.videos[curVid].sources[6].file}\n                className=\"vid\"\n                controls\n                autoPlay\n              />\n            )}\n          </div>\n        </div>\n      </Modal>\n    </Container>\n  );\n}\n","/*\n *   App\n *\n *   Creates the UI through AppView\n *   When mounted: loads playlist through PlaylistLoader\n *   Uses state for videos (playlist) and curVid: when a vid is selected\n *\n */\n\nimport React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport PlaylistLoader from \"./util/PlaylistLoader\";\nimport AppView from \"./view/AppView\";\n\nexport default function App() {\n  const [videos, setVideos] = useState();\n\n  //When mounted, load playlists -> then add to state: setVideos\n  useEffect(() => {\n    PlaylistLoader((playlist) => setVideos(playlist));\n  }, []);\n\n  return <AppView videos={videos} />;\n}\n","/*    PlaylistLoader\n *    Loads the playlist from external API\n *    On result.data.playlist: return pl to callBack\n *\n *    (url hardcoded above for this case)\n */\n\nimport axios from \"axios\";\n\nconst source = \"https://cdn.jwplayer.com/v2/playlists/iG6xB42W\";\n\nexport default function PlaylistLoader(callBack) {\n  axios({\n    method: \"get\",\n    url: source,\n  }).then(\n    (result) => {\n      if (result.data) {\n        if (result.data.playlist) {\n          callBack(result.data.playlist);\n        } else {\n          console.log(\"No playlist: \" + result.data);\n        }\n      } else {\n        console.log(\"No data: \" + result);\n      }\n    },\n    (error) => {\n      console.log(\"error: \" + error.message);\n    }\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}